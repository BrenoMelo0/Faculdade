1) O que é Modularização?
R:
    Modularização é a técnica de dividir um programa em partes menores e independentes chamadas funções ou módulos, cada uma com uma responsabilidade específica. Isso torna o programa mais organizado, fácil de entender e de manter.

2) Cite quatro vantagens da Modularização.
R:
    1. Facilidade de manutenção – facilita a correção e atualização do código.
    2. Reutilização de código – funções podem ser reaproveitadas em outros programas.
    3. Leitura e organização – melhora a compreensão do programa, pois separa tarefas distintas.
    4. Facilidade de teste – permite testar partes do programa de forma isolada.

3) Explique o que é escopo de variável.
R:
    Escopo de uma variável é a área do programa onde ela pode ser acessada ou usada. Ele define onde a variável é visível dentro do código.

4) Quais são os dois escopos de variáveis da linguagem C?
R:
    1. Escopo global
    2. Escopo local

5) O que significa uma variável possuir escopo global? Explique como definimos uma variável com escopo global em linguagem C.
R:
    Uma variável de escopo global é aquela que pode ser usada em qualquer parte do programa, pois é declarada fora de qualquer função.

    Exemplo:
    int x = 10;  // variável global
    int main() {
        printf("%d", x);  // pode ser acessada aqui
        return 0;
    }

6) O que significa uma variável possuir escopo local? Explique como definimos uma variável com escopo local em linguagem C.
R:
    Uma variável de escopo local é aquela que só pode ser usada dentro do bloco onde foi declarada, como dentro de uma função ou estrutura de controle.

    Exemplo:
    int main() {
        int x = 5;  // variável local
        printf("%d", x);
        return 0;
    }

7) Explique porque na maioria das vezes colocamos a palavra-chave int imediatamente antes da palavra-chave main em um programa escrito em linguagem C.
R:
    Colocamos int antes de main porque a função main retorna um valor inteiro ao sistema operacional, indicando se o programa foi executado com sucesso (return 0) ou não.

8) Explique porque na maioria das vezes colocamos a palavra-chave void logo após a palavra-chave main em um programa escrito em linguagem C.
R:
    Colocamos void entre os parênteses para indicar que a função main não recebe nenhum parâmetro. Ou seja, main(void) é equivalente a "função que não recebe argumentos".

9) Se você não colocar a palavra-chave int antes da palavra-chave main, o que você deverá fazer em seu programa para que ele não apresente nenhum erro ou advertência? Explique sua resposta.
R:
    Você deve usar um tipo de retorno compatível ou configurar o compilador para aceitar a omissão. No entanto, o padrão ANSI C exige que se use int main(), e omitir int pode causar avisos (warnings) ou erros, dependendo do compilador.

10) Se você não colocar a palavra-chave void dentro dos parênteses da função main, o que você deverá fazer em seu programa para que ele não apresente nenhum erro ou advertência? Explique sua resposta.
R:
    Se você escrever apenas main() (sem void), o compilador pode assumir que a função pode receber argumentos, mesmo que você não os use. Para evitar ambiguidade, é recomendável escrever main(void).

11) Explique a diferença entre erro em tempo de compilação e erro em tempo de execução.
R:
    - Erro em tempo de compilação ocorre quando o código contém erros de sintaxe ou regras da linguagem, impedindo o programa de compilar. Ex: esquecer ;, usar variável não declarada.
    - Erro em tempo de execução ocorre durante a execução do programa, mesmo que ele tenha compilado corretamente. Ex: divisão por zero, acesso a memória inválida.
